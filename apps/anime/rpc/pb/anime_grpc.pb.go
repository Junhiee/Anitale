// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: apps/anime/rpc/desc/proto/anime.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Anime_AnimeAdd_FullMethodName    = "/anime.Anime/AnimeAdd"
	Anime_AnimeDelete_FullMethodName = "/anime.Anime/AnimeDelete"
	Anime_AnimeUpdate_FullMethodName = "/anime.Anime/AnimeUpdate"
	Anime_AnimeList_FullMethodName   = "/anime.Anime/AnimeList"
)

// AnimeClient is the client API for Anime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeClient interface {
	AnimeAdd(ctx context.Context, in *AddAnimeReq, opts ...grpc.CallOption) (*AddAnimeResp, error)
	AnimeDelete(ctx context.Context, in *DeleteAnimeReq, opts ...grpc.CallOption) (*DeleteAnimeResp, error)
	AnimeUpdate(ctx context.Context, in *UpdateAnimeReq, opts ...grpc.CallOption) (*UpdateAnimeResp, error)
	// 多条件分页查询
	AnimeList(ctx context.Context, in *AnimeListReq, opts ...grpc.CallOption) (*AnimeListResp, error)
}

type animeClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeClient(cc grpc.ClientConnInterface) AnimeClient {
	return &animeClient{cc}
}

func (c *animeClient) AnimeAdd(ctx context.Context, in *AddAnimeReq, opts ...grpc.CallOption) (*AddAnimeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnimeResp)
	err := c.cc.Invoke(ctx, Anime_AnimeAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeClient) AnimeDelete(ctx context.Context, in *DeleteAnimeReq, opts ...grpc.CallOption) (*DeleteAnimeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnimeResp)
	err := c.cc.Invoke(ctx, Anime_AnimeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeClient) AnimeUpdate(ctx context.Context, in *UpdateAnimeReq, opts ...grpc.CallOption) (*UpdateAnimeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnimeResp)
	err := c.cc.Invoke(ctx, Anime_AnimeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeClient) AnimeList(ctx context.Context, in *AnimeListReq, opts ...grpc.CallOption) (*AnimeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnimeListResp)
	err := c.cc.Invoke(ctx, Anime_AnimeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServer is the server API for Anime service.
// All implementations must embed UnimplementedAnimeServer
// for forward compatibility.
type AnimeServer interface {
	AnimeAdd(context.Context, *AddAnimeReq) (*AddAnimeResp, error)
	AnimeDelete(context.Context, *DeleteAnimeReq) (*DeleteAnimeResp, error)
	AnimeUpdate(context.Context, *UpdateAnimeReq) (*UpdateAnimeResp, error)
	// 多条件分页查询
	AnimeList(context.Context, *AnimeListReq) (*AnimeListResp, error)
	mustEmbedUnimplementedAnimeServer()
}

// UnimplementedAnimeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnimeServer struct{}

func (UnimplementedAnimeServer) AnimeAdd(context.Context, *AddAnimeReq) (*AddAnimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnimeAdd not implemented")
}
func (UnimplementedAnimeServer) AnimeDelete(context.Context, *DeleteAnimeReq) (*DeleteAnimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnimeDelete not implemented")
}
func (UnimplementedAnimeServer) AnimeUpdate(context.Context, *UpdateAnimeReq) (*UpdateAnimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnimeUpdate not implemented")
}
func (UnimplementedAnimeServer) AnimeList(context.Context, *AnimeListReq) (*AnimeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnimeList not implemented")
}
func (UnimplementedAnimeServer) mustEmbedUnimplementedAnimeServer() {}
func (UnimplementedAnimeServer) testEmbeddedByValue()               {}

// UnsafeAnimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServer will
// result in compilation errors.
type UnsafeAnimeServer interface {
	mustEmbedUnimplementedAnimeServer()
}

func RegisterAnimeServer(s grpc.ServiceRegistrar, srv AnimeServer) {
	// If the following call pancis, it indicates UnimplementedAnimeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Anime_ServiceDesc, srv)
}

func _Anime_AnimeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServer).AnimeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Anime_AnimeAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServer).AnimeAdd(ctx, req.(*AddAnimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anime_AnimeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServer).AnimeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Anime_AnimeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServer).AnimeDelete(ctx, req.(*DeleteAnimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anime_AnimeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServer).AnimeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Anime_AnimeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServer).AnimeUpdate(ctx, req.(*UpdateAnimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anime_AnimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServer).AnimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Anime_AnimeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServer).AnimeList(ctx, req.(*AnimeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Anime_ServiceDesc is the grpc.ServiceDesc for Anime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anime.Anime",
	HandlerType: (*AnimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnimeAdd",
			Handler:    _Anime_AnimeAdd_Handler,
		},
		{
			MethodName: "AnimeDelete",
			Handler:    _Anime_AnimeDelete_Handler,
		},
		{
			MethodName: "AnimeUpdate",
			Handler:    _Anime_AnimeUpdate_Handler,
		},
		{
			MethodName: "AnimeList",
			Handler:    _Anime_AnimeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/anime/rpc/desc/proto/anime.proto",
}
