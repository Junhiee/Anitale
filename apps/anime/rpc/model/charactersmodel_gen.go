// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheCharactersCharacterIdPrefix = "cache:characters:characterId:"
)

type (
	charactersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Characters) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Characters) error
		FindOne(ctx context.Context, characterId int64) (*Characters, error)
		Update(ctx context.Context, tx *gorm.DB, data *Characters) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Characters) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Characters) error

		Delete(ctx context.Context, tx *gorm.DB, characterId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultCharactersModel struct {
		gormc.CachedConn
		table string
	}

	Characters struct {
		CharacterId int64          `gorm:"column:character_id;primary_key"` // 角色的唯一标识
		AnimeId     sql.NullInt64  `gorm:"column:anime_id"`                 // 所属动画的ID，逻辑上指向 anime 表
		Name        string         `gorm:"column:name"`                     // 角色的名字
		Role        string         `gorm:"column:role"`                     // 角色类型，如：main, supporting, cameo
		Description sql.NullString `gorm:"column:description"`              // 角色的简介
		ImageUrl    sql.NullString `gorm:"column:image_url"`                // 角色的图片URL
	}
)

func (Characters) TableName() string {
	return "`characters`"
}

func newCharactersModel(conn *gorm.DB, c cache.CacheConf) *defaultCharactersModel {
	return &defaultCharactersModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`characters`",
	}
}

func (m *defaultCharactersModel) GetCacheKeys(data *Characters) []string {
	if data == nil {
		return []string{}
	}
	charactersCharacterIdKey := fmt.Sprintf("%s%v", cacheCharactersCharacterIdPrefix, data.CharacterId)
	cacheKeys := []string{
		charactersCharacterIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultCharactersModel) Insert(ctx context.Context, tx *gorm.DB, data *Characters) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultCharactersModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Characters) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultCharactersModel) FindOne(ctx context.Context, characterId int64) (*Characters, error) {
	charactersCharacterIdKey := fmt.Sprintf("%s%v", cacheCharactersCharacterIdPrefix, characterId)
	var resp Characters
	err := m.QueryCtx(ctx, &resp, charactersCharacterIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Characters{}).Where("`character_id` = ?", characterId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCharactersModel) Update(ctx context.Context, tx *gorm.DB, data *Characters) error {
	old, err := m.FindOne(ctx, data.CharacterId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultCharactersModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Characters) error {
	clearData := make([]Characters, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultCharactersModel) Delete(ctx context.Context, tx *gorm.DB, characterId int64) error {
	data, err := m.FindOne(ctx, characterId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Characters{}, characterId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultCharactersModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Characters) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultCharactersModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultCharactersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCharactersCharacterIdPrefix, primary)
}

func (m *defaultCharactersModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Characters{}).Where("`character_id` = ?", primary).Take(v).Error
}
