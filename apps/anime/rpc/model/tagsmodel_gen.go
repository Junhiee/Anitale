// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	tagsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Tags) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Tags) error
		FindOne(ctx context.Context, tagId int64) (*Tags, error)
		Update(ctx context.Context, tx *gorm.DB, data *Tags) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Tags) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Tags) error

		Delete(ctx context.Context, tx *gorm.DB, tagId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultTagsModel struct {
		conn  *gorm.DB
		table string
	}

	Tags struct {
		TagId int64  `gorm:"column:tag_id;primary_key"` // 主键
		Tag   string `gorm:"column:tag"`                // 标签
	}
)

func (Tags) TableName() string {
	return "`tags`"
}

func newTagsModel(conn *gorm.DB) *defaultTagsModel {
	return &defaultTagsModel{
		conn:  conn,
		table: "`tags`",
	}
}

func (m *defaultTagsModel) Insert(ctx context.Context, tx *gorm.DB, data *Tags) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultTagsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Tags) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultTagsModel) FindOne(ctx context.Context, tagId int64) (*Tags, error) {
	var resp Tags
	err := m.conn.WithContext(ctx).Model(&Tags{}).Where("`tag_id` = ?", tagId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagsModel) Update(ctx context.Context, tx *gorm.DB, data *Tags) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultTagsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Tags) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultTagsModel) Delete(ctx context.Context, tx *gorm.DB, tagId int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Tags{}, tagId).Error

	return err
}

func (m *defaultTagsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Tags) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultTagsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
