// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheAnimeUpdatesUpdateIdPrefix = "cache:animeUpdates:updateId:"
)

type (
	animeUpdatesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AnimeUpdates) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []AnimeUpdates) error
		FindOne(ctx context.Context, updateId int64) (*AnimeUpdates, error)
		Update(ctx context.Context, tx *gorm.DB, data *AnimeUpdates) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AnimeUpdates) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []AnimeUpdates) error

		Delete(ctx context.Context, tx *gorm.DB, updateId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAnimeUpdatesModel struct {
		gormc.CachedConn
		table string
	}

	AnimeUpdates struct {
		UpdateId          int64          `gorm:"column:update_id;primary_key"` // 更新事件的唯一标识
		AnimeId           int64          `gorm:"column:anime_id"`              // 动画的唯一标识
		EpisodeId         sql.NullInt64  `gorm:"column:episode_id"`            // 新发布的剧集ID
		UpdateType        string         `gorm:"column:update_type"`           // 更新类型，值可为 new_episode, season_update, general_update
		UpdateDescription sql.NullString `gorm:"column:update_description"`    // 更新内容描述
		UpdatedAt         time.Time      `gorm:"column:updated_at"`            // 更新时间
	}
)

func (AnimeUpdates) TableName() string {
	return "`anime_updates`"
}

func newAnimeUpdatesModel(conn *gorm.DB, c cache.CacheConf) *defaultAnimeUpdatesModel {
	return &defaultAnimeUpdatesModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`anime_updates`",
	}
}

func (m *defaultAnimeUpdatesModel) GetCacheKeys(data *AnimeUpdates) []string {
	if data == nil {
		return []string{}
	}
	animeUpdatesUpdateIdKey := fmt.Sprintf("%s%v", cacheAnimeUpdatesUpdateIdPrefix, data.UpdateId)
	cacheKeys := []string{
		animeUpdatesUpdateIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAnimeUpdatesModel) Insert(ctx context.Context, tx *gorm.DB, data *AnimeUpdates) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultAnimeUpdatesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []AnimeUpdates) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultAnimeUpdatesModel) FindOne(ctx context.Context, updateId int64) (*AnimeUpdates, error) {
	animeUpdatesUpdateIdKey := fmt.Sprintf("%s%v", cacheAnimeUpdatesUpdateIdPrefix, updateId)
	var resp AnimeUpdates
	err := m.QueryCtx(ctx, &resp, animeUpdatesUpdateIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AnimeUpdates{}).Where("`update_id` = ?", updateId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnimeUpdatesModel) Update(ctx context.Context, tx *gorm.DB, data *AnimeUpdates) error {
	old, err := m.FindOne(ctx, data.UpdateId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultAnimeUpdatesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AnimeUpdates) error {
	clearData := make([]AnimeUpdates, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultAnimeUpdatesModel) Delete(ctx context.Context, tx *gorm.DB, updateId int64) error {
	data, err := m.FindOne(ctx, updateId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AnimeUpdates{}, updateId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultAnimeUpdatesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []AnimeUpdates) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultAnimeUpdatesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAnimeUpdatesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAnimeUpdatesUpdateIdPrefix, primary)
}

func (m *defaultAnimeUpdatesModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AnimeUpdates{}).Where("`update_id` = ?", primary).Take(v).Error
}
