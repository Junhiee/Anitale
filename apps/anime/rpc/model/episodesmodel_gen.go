// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheEpisodesEpisodeIdPrefix = "cache:episodes:episodeId:"
)

type (
	episodesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Episodes) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Episodes) error
		FindOne(ctx context.Context, episodeId int64) (*Episodes, error)
		Update(ctx context.Context, tx *gorm.DB, data *Episodes) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Episodes) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Episodes) error

		Delete(ctx context.Context, tx *gorm.DB, episodeId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultEpisodesModel struct {
		gormc.CachedConn
		table string
	}

	Episodes struct {
		EpisodeId     int64          `gorm:"column:episode_id;primary_key"` // 剧集的唯一标识
		AnimeId       sql.NullInt64  `gorm:"column:anime_id"`               // 所属动画的ID，逻辑上指向 anime 表
		EpisodeNumber sql.NullInt32  `gorm:"column:episode_number"`         // 剧集的编号，如第几集
		Title         sql.NullString `gorm:"column:title"`                  // 剧集标题
		ReleaseDate   sql.NullTime   `gorm:"column:release_date"`           // 放送日期
		Duration      sql.NullInt32  `gorm:"column:duration"`               // 剧集时长，单位为分钟
		Synopsis      sql.NullString `gorm:"column:synopsis"`               // 剧集的内容概要
		VideoUrl      sql.NullString `gorm:"column:video_url"`              // 剧集视频的URL
	}
)

func (Episodes) TableName() string {
	return "`episodes`"
}

func newEpisodesModel(conn *gorm.DB, c cache.CacheConf) *defaultEpisodesModel {
	return &defaultEpisodesModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`episodes`",
	}
}

func (m *defaultEpisodesModel) GetCacheKeys(data *Episodes) []string {
	if data == nil {
		return []string{}
	}
	episodesEpisodeIdKey := fmt.Sprintf("%s%v", cacheEpisodesEpisodeIdPrefix, data.EpisodeId)
	cacheKeys := []string{
		episodesEpisodeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultEpisodesModel) Insert(ctx context.Context, tx *gorm.DB, data *Episodes) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultEpisodesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Episodes) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultEpisodesModel) FindOne(ctx context.Context, episodeId int64) (*Episodes, error) {
	episodesEpisodeIdKey := fmt.Sprintf("%s%v", cacheEpisodesEpisodeIdPrefix, episodeId)
	var resp Episodes
	err := m.QueryCtx(ctx, &resp, episodesEpisodeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Episodes{}).Where("`episode_id` = ?", episodeId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEpisodesModel) Update(ctx context.Context, tx *gorm.DB, data *Episodes) error {
	old, err := m.FindOne(ctx, data.EpisodeId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultEpisodesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Episodes) error {
	clearData := make([]Episodes, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultEpisodesModel) Delete(ctx context.Context, tx *gorm.DB, episodeId int64) error {
	data, err := m.FindOne(ctx, episodeId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Episodes{}, episodeId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultEpisodesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Episodes) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultEpisodesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultEpisodesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheEpisodesEpisodeIdPrefix, primary)
}

func (m *defaultEpisodesModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Episodes{}).Where("`episode_id` = ?", primary).Take(v).Error
}
