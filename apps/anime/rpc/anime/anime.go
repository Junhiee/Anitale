// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: anime.proto

package anime

import (
	"context"

	"Anitale/apps/anime/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAnimeReq     = pb.AddAnimeReq
	AddAnimeResp    = pb.AddAnimeResp
	AnimeListReq    = pb.AnimeListReq
	AnimeListResp   = pb.AnimeListResp
	DeleteAnimeReq  = pb.DeleteAnimeReq
	DeleteAnimeResp = pb.DeleteAnimeResp
	GetAnimeReq     = pb.GetAnimeReq
	GetAnimeResp    = pb.GetAnimeResp
	Item            = pb.Item
	UpdateAnimeReq  = pb.UpdateAnimeReq
	UpdateAnimeResp = pb.UpdateAnimeResp

	Anime interface {
		GetAnime(ctx context.Context, in *GetAnimeReq, opts ...grpc.CallOption) (*GetAnimeResp, error)
		AddAnime(ctx context.Context, in *AddAnimeReq, opts ...grpc.CallOption) (*AddAnimeResp, error)
		DeleteAnime(ctx context.Context, in *DeleteAnimeReq, opts ...grpc.CallOption) (*DeleteAnimeResp, error)
		UpdateAnime(ctx context.Context, in *UpdateAnimeReq, opts ...grpc.CallOption) (*UpdateAnimeResp, error)
		// 多条件分页查询
		AnimeList(ctx context.Context, in *AnimeListReq, opts ...grpc.CallOption) (*AnimeListResp, error)
	}

	defaultAnime struct {
		cli zrpc.Client
	}
)

func NewAnime(cli zrpc.Client) Anime {
	return &defaultAnime{
		cli: cli,
	}
}

func (m *defaultAnime) GetAnime(ctx context.Context, in *GetAnimeReq, opts ...grpc.CallOption) (*GetAnimeResp, error) {
	client := pb.NewAnimeClient(m.cli.Conn())
	return client.GetAnime(ctx, in, opts...)
}

func (m *defaultAnime) AddAnime(ctx context.Context, in *AddAnimeReq, opts ...grpc.CallOption) (*AddAnimeResp, error) {
	client := pb.NewAnimeClient(m.cli.Conn())
	return client.AddAnime(ctx, in, opts...)
}

func (m *defaultAnime) DeleteAnime(ctx context.Context, in *DeleteAnimeReq, opts ...grpc.CallOption) (*DeleteAnimeResp, error) {
	client := pb.NewAnimeClient(m.cli.Conn())
	return client.DeleteAnime(ctx, in, opts...)
}

func (m *defaultAnime) UpdateAnime(ctx context.Context, in *UpdateAnimeReq, opts ...grpc.CallOption) (*UpdateAnimeResp, error) {
	client := pb.NewAnimeClient(m.cli.Conn())
	return client.UpdateAnime(ctx, in, opts...)
}

// 多条件分页查询
func (m *defaultAnime) AnimeList(ctx context.Context, in *AnimeListReq, opts ...grpc.CallOption) (*AnimeListResp, error) {
	client := pb.NewAnimeClient(m.cli.Conn())
	return client.AnimeList(ctx, in, opts...)
}
