// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheStatsAnimeIdPrefix = "cache:stats:animeId:"
)

type (
	statsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Stats) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Stats) error
		FindOne(ctx context.Context, animeId int64) (*Stats, error)
		Update(ctx context.Context, tx *gorm.DB, data *Stats) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Stats) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Stats) error

		Delete(ctx context.Context, tx *gorm.DB, animeId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultStatsModel struct {
		gormc.CachedConn
		table string
	}

	Stats struct {
		AnimeId      int64     `gorm:"column:anime_id;primary_key"` // 主键
		ViewCount    int64     `gorm:"column:view_count"`           // 播放数量
		LikeCount    int64     `gorm:"column:like_count"`           // 点赞数量
		CommentCount int64     `gorm:"column:comment_count"`        // 评论数量
		ShareCount   int64     `gorm:"column:share_count"`          // 转发数量
		LastUpdated  time.Time `gorm:"column:last_updated"`         // 最后更新时间
	}
)

func (Stats) TableName() string {
	return "`stats`"
}

func newStatsModel(conn *gorm.DB, c cache.CacheConf) *defaultStatsModel {
	return &defaultStatsModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`stats`",
	}
}

func (m *defaultStatsModel) GetCacheKeys(data *Stats) []string {
	if data == nil {
		return []string{}
	}
	statsAnimeIdKey := fmt.Sprintf("%s%v", cacheStatsAnimeIdPrefix, data.AnimeId)
	cacheKeys := []string{
		statsAnimeIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultStatsModel) Insert(ctx context.Context, tx *gorm.DB, data *Stats) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultStatsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Stats) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultStatsModel) FindOne(ctx context.Context, animeId int64) (*Stats, error) {
	statsAnimeIdKey := fmt.Sprintf("%s%v", cacheStatsAnimeIdPrefix, animeId)
	var resp Stats
	err := m.QueryCtx(ctx, &resp, statsAnimeIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Stats{}).Where("`anime_id` = ?", animeId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStatsModel) Update(ctx context.Context, tx *gorm.DB, data *Stats) error {
	old, err := m.FindOne(ctx, data.AnimeId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultStatsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Stats) error {
	clearData := make([]Stats, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultStatsModel) Delete(ctx context.Context, tx *gorm.DB, animeId int64) error {
	data, err := m.FindOne(ctx, animeId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Stats{}, animeId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultStatsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Stats) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultStatsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultStatsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStatsAnimeIdPrefix, primary)
}

func (m *defaultStatsModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Stats{}).Where("`anime_id` = ?", primary).Take(v).Error
}
