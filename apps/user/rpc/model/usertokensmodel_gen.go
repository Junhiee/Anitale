// Code generated by goctl. DO NOT EDIT!

package model

import (
	"database/sql"
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"time"

	"gorm.io/gorm"
)

type (
	userTokensModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserTokens) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserTokens) error
		FindOne(ctx context.Context, userId uint64) (*UserTokens, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserTokens) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserTokens) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserTokens) error

		Delete(ctx context.Context, tx *gorm.DB, userId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserTokensModel struct {
		conn  *gorm.DB
		table string
	}

	UserTokens struct {
		UserId       uint64         `gorm:"column:user_id;primary_key"` // 用户唯一标识，与users表的id关联
		AccessToken  string         `gorm:"column:access_token"`        // 用户的访问令牌
		RefreshToken sql.NullString `gorm:"column:refresh_token"`       // 用户的刷新令牌
		ExpiresAt    sql.NullTime   `gorm:"column:expires_at"`          // 访问令牌的过期时间
		CreatedAt    time.Time      `gorm:"column:created_at"`          // 令牌创建时间
		UpdatedAt    time.Time      `gorm:"column:updated_at"`          // 令牌更新时间
	}
)

func (UserTokens) TableName() string {
	return "`user_tokens`"
}

func newUserTokensModel(conn *gorm.DB) *defaultUserTokensModel {
	return &defaultUserTokensModel{
		conn:  conn,
		table: "`user_tokens`",
	}
}

func (m *defaultUserTokensModel) Insert(ctx context.Context, tx *gorm.DB, data *UserTokens) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUserTokensModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserTokens) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUserTokensModel) FindOne(ctx context.Context, userId uint64) (*UserTokens, error) {
	var resp UserTokens
	err := m.conn.WithContext(ctx).Model(&UserTokens{}).Where("`user_id` = ?", userId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokensModel) Update(ctx context.Context, tx *gorm.DB, data *UserTokens) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUserTokensModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserTokens) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUserTokensModel) Delete(ctx context.Context, tx *gorm.DB, userId uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&UserTokens{}, userId).Error

	return err
}

func (m *defaultUserTokensModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserTokens) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserTokensModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
