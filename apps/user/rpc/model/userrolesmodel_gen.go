// Code generated by goctl. DO NOT EDIT!

package model

import (
	"database/sql"
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	userRolesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserRoles) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserRoles) error
		FindOne(ctx context.Context, roleId uint64) (*UserRoles, error)
		FindOneByRoleName(ctx context.Context, roleName string) (*UserRoles, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserRoles) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserRoles) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserRoles) error

		Delete(ctx context.Context, tx *gorm.DB, roleId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserRolesModel struct {
		conn  *gorm.DB
		table string
	}

	UserRoles struct {
		RoleId   uint64         `gorm:"column:role_id;primary_key"` // 角色ID
		RoleName string         `gorm:"column:role_name"`           // 权限的名称，admin|user|guest
		RoleDesc sql.NullString `gorm:"column:role_desc"`           // 角色的描述信息
	}
)

func (UserRoles) TableName() string {
	return "`user_roles`"
}

func newUserRolesModel(conn *gorm.DB) *defaultUserRolesModel {
	return &defaultUserRolesModel{
		conn:  conn,
		table: "`user_roles`",
	}
}

func (m *defaultUserRolesModel) Insert(ctx context.Context, tx *gorm.DB, data *UserRoles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUserRolesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserRoles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUserRolesModel) FindOne(ctx context.Context, roleId uint64) (*UserRoles, error) {
	var resp UserRoles
	err := m.conn.WithContext(ctx).Model(&UserRoles{}).Where("`role_id` = ?", roleId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) FindOneByRoleName(ctx context.Context, roleName string) (*UserRoles, error) {
	var resp UserRoles
	err := m.conn.WithContext(ctx).Model(&UserRoles{}).Where("`role_name` = ?", roleName).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) Update(ctx context.Context, tx *gorm.DB, data *UserRoles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUserRolesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserRoles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUserRolesModel) Delete(ctx context.Context, tx *gorm.DB, roleId uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&UserRoles{}, roleId).Error

	return err
}

func (m *defaultUserRolesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserRoles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserRolesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
