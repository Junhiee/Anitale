// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"time"

	"gorm.io/gorm"
)

type (
	userSubscriptionsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserSubscriptions) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserSubscriptions) error
		FindOne(ctx context.Context, subscriptionId int64) (*UserSubscriptions, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserSubscriptions) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserSubscriptions) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserSubscriptions) error

		Delete(ctx context.Context, tx *gorm.DB, subscriptionId int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserSubscriptionsModel struct {
		conn  *gorm.DB
		table string
	}

	UserSubscriptions struct {
		SubscriptionId         int64     `gorm:"column:subscription_id;primary_key"` // 订阅记录的唯一标识
		UserId                 uint64    `gorm:"column:user_id"`                     // 用户的唯一标识
		AnimeId                int64     `gorm:"column:anime_id"`                    // 动画的唯一标识
		SubscribedAt           time.Time `gorm:"column:subscribed_at"`               // 订阅时间
		NotificationPreference string    `gorm:"column:notification_preference"`     // 通知方式，值可为 email, sms, app, none
		Status                 string    `gorm:"column:status"`                      // 订阅状态，值可为 active 或 inactive
	}
)

func (UserSubscriptions) TableName() string {
	return "`user_subscriptions`"
}

func newUserSubscriptionsModel(conn *gorm.DB) *defaultUserSubscriptionsModel {
	return &defaultUserSubscriptionsModel{
		conn:  conn,
		table: "`user_subscriptions`",
	}
}

func (m *defaultUserSubscriptionsModel) Insert(ctx context.Context, tx *gorm.DB, data *UserSubscriptions) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUserSubscriptionsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserSubscriptions) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUserSubscriptionsModel) FindOne(ctx context.Context, subscriptionId int64) (*UserSubscriptions, error) {
	var resp UserSubscriptions
	err := m.conn.WithContext(ctx).Model(&UserSubscriptions{}).Where("`subscription_id` = ?", subscriptionId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSubscriptionsModel) Update(ctx context.Context, tx *gorm.DB, data *UserSubscriptions) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUserSubscriptionsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserSubscriptions) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUserSubscriptionsModel) Delete(ctx context.Context, tx *gorm.DB, subscriptionId int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&UserSubscriptions{}, subscriptionId).Error

	return err
}

func (m *defaultUserSubscriptionsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserSubscriptions) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserSubscriptionsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
