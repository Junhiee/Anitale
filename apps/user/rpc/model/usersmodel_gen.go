// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"time"

	"gorm.io/gorm"
)

type (
	usersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error
		FindOne(ctx context.Context, id uint64) (*Users, error)
		FindOneByEmail(ctx context.Context, email string) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		Update(ctx context.Context, tx *gorm.DB, data *Users) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUsersModel struct {
		conn  *gorm.DB
		table string
	}

	Users struct {
		Id           uint64    `gorm:"column:id;primary_key"` // 用户唯一标识
		Username     string    `gorm:"column:username"`       // 用户名，必须唯一
		Email        string    `gorm:"column:email"`          // 用户邮箱，必须唯一
		PasswordHash string    `gorm:"column:password_hash"`  // 加密后的用户密码
		IsActive     int64     `gorm:"column:is_active"`      // 用户账户是否激活
		IsVerified   int64     `gorm:"column:is_verified"`    // 用户邮箱是否经过验证
		CreatedAt    time.Time `gorm:"column:created_at"`     // 用户账户创建时间
		UpdatedAt    time.Time `gorm:"column:updated_at"`     // 用户账户最近更新时间
	}
)

func (Users) TableName() string {
	return "`users`"
}

func newUsersModel(conn *gorm.DB) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUsersModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id uint64) (*Users, error) {
	var resp Users
	err := m.conn.WithContext(ctx).Model(&Users{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByEmail(ctx context.Context, email string) (*Users, error) {
	var resp Users
	err := m.conn.WithContext(ctx).Model(&Users{}).Where("`email` = ?", email).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	var resp Users
	err := m.conn.WithContext(ctx).Model(&Users{}).Where("`username` = ?", username).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Update(ctx context.Context, tx *gorm.DB, data *Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUsersModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUsersModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Users{}, id).Error

	return err
}

func (m *defaultUsersModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Users) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUsersModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
