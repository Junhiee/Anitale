// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"time"

	"gorm.io/gorm"
)

type (
	userPreferencesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserPreferences) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserPreferences) error
		FindOne(ctx context.Context, userId uint64) (*UserPreferences, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserPreferences) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserPreferences) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserPreferences) error

		Delete(ctx context.Context, tx *gorm.DB, userId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserPreferencesModel struct {
		conn  *gorm.DB
		table string
	}

	UserPreferences struct {
		UserId            uint64    `gorm:"column:user_id;primary_key"` // 用户唯一标识，与users表的id关联
		Lang              string    `gorm:"column:lang"`                // 用户的语言偏好
		Timezone          string    `gorm:"column:timezone"`            // 用户的时区偏好
		ReceiveNewsletter int64     `gorm:"column:receive_newsletter"`  // 用户是否接收邮件通知
		ReceiveSms        int64     `gorm:"column:receive_sms"`         // 用户是否接收短信通知
		ReceivePush       int64     `gorm:"column:receive_push"`        // 用户是否接收推送通知
		CreatedAt         time.Time `gorm:"column:created_at"`          // 偏好设置的创建时间
		UpdatedAt         time.Time `gorm:"column:updated_at"`          // 偏好设置的更新时间
	}
)

func (UserPreferences) TableName() string {
	return "`user_preferences`"
}

func newUserPreferencesModel(conn *gorm.DB) *defaultUserPreferencesModel {
	return &defaultUserPreferencesModel{
		conn:  conn,
		table: "`user_preferences`",
	}
}

func (m *defaultUserPreferencesModel) Insert(ctx context.Context, tx *gorm.DB, data *UserPreferences) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUserPreferencesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserPreferences) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUserPreferencesModel) FindOne(ctx context.Context, userId uint64) (*UserPreferences, error) {
	var resp UserPreferences
	err := m.conn.WithContext(ctx).Model(&UserPreferences{}).Where("`user_id` = ?", userId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPreferencesModel) Update(ctx context.Context, tx *gorm.DB, data *UserPreferences) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUserPreferencesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserPreferences) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUserPreferencesModel) Delete(ctx context.Context, tx *gorm.DB, userId uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&UserPreferences{}, userId).Error

	return err
}

func (m *defaultUserPreferencesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserPreferences) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserPreferencesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
