// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheUserPreferencesUserIdPrefix = "cache:userPreferences:userId:"
)

type (
	userPreferencesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserPreferences) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserPreferences) error
		FindOne(ctx context.Context, userId uint64) (*UserPreferences, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserPreferences) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserPreferences) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserPreferences) error

		Delete(ctx context.Context, tx *gorm.DB, userId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserPreferencesModel struct {
		gormc.CachedConn
		table string
	}

	UserPreferences struct {
		UserId            uint64    `gorm:"column:user_id;primary_key"` // 用户唯一标识，与users表的id关联
		Lang              string    `gorm:"column:lang"`                // 用户的语言偏好
		Timezone          string    `gorm:"column:timezone"`            // 用户的时区偏好
		ReceiveNewsletter int64     `gorm:"column:receive_newsletter"`  // 用户是否接收邮件通知
		ReceiveSms        int64     `gorm:"column:receive_sms"`         // 用户是否接收短信通知
		ReceivePush       int64     `gorm:"column:receive_push"`        // 用户是否接收推送通知
		CreatedAt         time.Time `gorm:"column:created_at"`          // 偏好设置的创建时间
		UpdatedAt         time.Time `gorm:"column:updated_at"`          // 偏好设置的更新时间
	}
)

func (UserPreferences) TableName() string {
	return "`user_preferences`"
}

func newUserPreferencesModel(conn *gorm.DB, c cache.CacheConf) *defaultUserPreferencesModel {
	return &defaultUserPreferencesModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_preferences`",
	}
}

func (m *defaultUserPreferencesModel) GetCacheKeys(data *UserPreferences) []string {
	if data == nil {
		return []string{}
	}
	userPreferencesUserIdKey := fmt.Sprintf("%s%v", cacheUserPreferencesUserIdPrefix, data.UserId)
	cacheKeys := []string{
		userPreferencesUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserPreferencesModel) Insert(ctx context.Context, tx *gorm.DB, data *UserPreferences) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultUserPreferencesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserPreferences) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultUserPreferencesModel) FindOne(ctx context.Context, userId uint64) (*UserPreferences, error) {
	userPreferencesUserIdKey := fmt.Sprintf("%s%v", cacheUserPreferencesUserIdPrefix, userId)
	var resp UserPreferences
	err := m.QueryCtx(ctx, &resp, userPreferencesUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserPreferences{}).Where("`user_id` = ?", userId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPreferencesModel) Update(ctx context.Context, tx *gorm.DB, data *UserPreferences) error {
	old, err := m.FindOne(ctx, data.UserId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultUserPreferencesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserPreferences) error {
	clearData := make([]UserPreferences, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultUserPreferencesModel) Delete(ctx context.Context, tx *gorm.DB, userId uint64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserPreferences{}, userId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultUserPreferencesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserPreferences) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserPreferencesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserPreferencesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserPreferencesUserIdPrefix, primary)
}

func (m *defaultUserPreferencesModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserPreferences{}).Where("`user_id` = ?", primary).Take(v).Error
}
