// Code generated by goctl. DO NOT EDIT!

package model

import (
	"database/sql"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheUserProfilesUserIdPrefix = "cache:userProfiles:userId:"
)

type (
	userProfilesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserProfiles) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserProfiles) error
		FindOne(ctx context.Context, userId uint64) (*UserProfiles, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserProfiles) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserProfiles) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserProfiles) error

		Delete(ctx context.Context, tx *gorm.DB, userId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserProfilesModel struct {
		gormc.CachedConn
		table string
	}

	UserProfiles struct {
		UserId    uint64         `gorm:"column:user_id;primary_key"` // 与users表的ID关联，用户唯一标识
		FullName  sql.NullString `gorm:"column:full_name"`           // 用户的全名
		Bio       sql.NullString `gorm:"column:bio"`                 // 用户个人简介
		AvatarUrl sql.NullString `gorm:"column:avatar_url"`          // 用户头像的URL
		Birthday  sql.NullTime   `gorm:"column:birthday"`            // 用户的生日
		Gender    sql.NullString `gorm:"column:gender"`              // 用户性别
		Loc       sql.NullString `gorm:"column:loc"`                 // 用户的所在地
		CreatedAt time.Time      `gorm:"column:created_at"`          // 资料创建时间
		UpdatedAt time.Time      `gorm:"column:updated_at"`          // 资料更新时间
	}
)

func (UserProfiles) TableName() string {
	return "`user_profiles`"
}

func newUserProfilesModel(conn *gorm.DB, c cache.CacheConf) *defaultUserProfilesModel {
	return &defaultUserProfilesModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_profiles`",
	}
}

func (m *defaultUserProfilesModel) GetCacheKeys(data *UserProfiles) []string {
	if data == nil {
		return []string{}
	}
	userProfilesUserIdKey := fmt.Sprintf("%s%v", cacheUserProfilesUserIdPrefix, data.UserId)
	cacheKeys := []string{
		userProfilesUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserProfilesModel) Insert(ctx context.Context, tx *gorm.DB, data *UserProfiles) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultUserProfilesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserProfiles) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultUserProfilesModel) FindOne(ctx context.Context, userId uint64) (*UserProfiles, error) {
	userProfilesUserIdKey := fmt.Sprintf("%s%v", cacheUserProfilesUserIdPrefix, userId)
	var resp UserProfiles
	err := m.QueryCtx(ctx, &resp, userProfilesUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserProfiles{}).Where("`user_id` = ?", userId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfilesModel) Update(ctx context.Context, tx *gorm.DB, data *UserProfiles) error {
	old, err := m.FindOne(ctx, data.UserId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultUserProfilesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserProfiles) error {
	clearData := make([]UserProfiles, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultUserProfilesModel) Delete(ctx context.Context, tx *gorm.DB, userId uint64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserProfiles{}, userId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultUserProfilesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserProfiles) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserProfilesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserProfilesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserProfilesUserIdPrefix, primary)
}

func (m *defaultUserProfilesModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserProfiles{}).Where("`user_id` = ?", primary).Take(v).Error
}
