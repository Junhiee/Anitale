// Code generated by goctl. DO NOT EDIT!

package model

import (
	"database/sql"
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"time"

	"gorm.io/gorm"
)

type (
	userProfilesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserProfiles) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserProfiles) error
		FindOne(ctx context.Context, userId uint64) (*UserProfiles, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserProfiles) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserProfiles) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserProfiles) error

		Delete(ctx context.Context, tx *gorm.DB, userId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserProfilesModel struct {
		conn  *gorm.DB
		table string
	}

	UserProfiles struct {
		UserId    uint64         `gorm:"column:user_id;primary_key"` // 与users表的ID关联，用户唯一标识
		FullName  sql.NullString `gorm:"column:full_name"`           // 用户的全名
		Bio       sql.NullString `gorm:"column:bio"`                 // 用户个人简介
		AvatarUrl sql.NullString `gorm:"column:avatar_url"`          // 用户头像的URL
		Birthday  sql.NullTime   `gorm:"column:birthday"`            // 用户的生日
		Gender    sql.NullString `gorm:"column:gender"`              // 用户性别
		Loc       sql.NullString `gorm:"column:loc"`                 // 用户的所在地
		CreatedAt time.Time      `gorm:"column:created_at"`          // 资料创建时间
		UpdatedAt time.Time      `gorm:"column:updated_at"`          // 资料更新时间
	}
)

func (UserProfiles) TableName() string {
	return "`user_profiles`"
}

func newUserProfilesModel(conn *gorm.DB) *defaultUserProfilesModel {
	return &defaultUserProfilesModel{
		conn:  conn,
		table: "`user_profiles`",
	}
}

func (m *defaultUserProfilesModel) Insert(ctx context.Context, tx *gorm.DB, data *UserProfiles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}
func (m *defaultUserProfilesModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserProfiles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&news).Error

	return err
}

func (m *defaultUserProfilesModel) FindOne(ctx context.Context, userId uint64) (*UserProfiles, error) {
	var resp UserProfiles
	err := m.conn.WithContext(ctx).Model(&UserProfiles{}).Where("`user_id` = ?", userId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfilesModel) Update(ctx context.Context, tx *gorm.DB, data *UserProfiles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultUserProfilesModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserProfiles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultUserProfilesModel) Delete(ctx context.Context, tx *gorm.DB, userId uint64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&UserProfiles{}, userId).Error

	return err
}

func (m *defaultUserProfilesModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserProfiles) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&datas).Error

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserProfilesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
