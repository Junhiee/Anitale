// Code generated by goctl. DO NOT EDIT!

package model

import (
	"database/sql"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheUserRoleAssignmentsAssignmentIdPrefix = "cache:userRoleAssignments:assignmentId:"
	cacheUserRoleAssignmentsUserIdRoleIdPrefix = "cache:userRoleAssignments:userId:roleId:"
)

type (
	userRoleAssignmentsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *UserRoleAssignments) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []UserRoleAssignments) error
		FindOne(ctx context.Context, assignmentId uint64) (*UserRoleAssignments, error)
		FindOneByUserIdRoleId(ctx context.Context, userId sql.NullInt64, roleId sql.NullInt64) (*UserRoleAssignments, error)
		Update(ctx context.Context, tx *gorm.DB, data *UserRoleAssignments) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserRoleAssignments) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserRoleAssignments) error

		Delete(ctx context.Context, tx *gorm.DB, assignmentId uint64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserRoleAssignmentsModel struct {
		gormc.CachedConn
		table string
	}

	UserRoleAssignments struct {
		AssignmentId uint64        `gorm:"column:assignment_id;primary_key"` // 角色分配关系唯一标识
		UserId       sql.NullInt64 `gorm:"column:user_id"`                   // 用户唯一标识，与users表的id关联
		RoleId       sql.NullInt64 `gorm:"column:role_id"`                   // 角色唯一标识，与user_roles表的id关联
		AssignedAt   time.Time     `gorm:"column:assigned_at"`               // 角色分配时间
	}
)

func (UserRoleAssignments) TableName() string {
	return "`user_role_assignments`"
}

func newUserRoleAssignmentsModel(conn *gorm.DB, c cache.CacheConf) *defaultUserRoleAssignmentsModel {
	return &defaultUserRoleAssignmentsModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_role_assignments`",
	}
}

func (m *defaultUserRoleAssignmentsModel) GetCacheKeys(data *UserRoleAssignments) []string {
	if data == nil {
		return []string{}
	}
	userRoleAssignmentsAssignmentIdKey := fmt.Sprintf("%s%v", cacheUserRoleAssignmentsAssignmentIdPrefix, data.AssignmentId)
	userRoleAssignmentsUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserRoleAssignmentsUserIdRoleIdPrefix, data.UserId, data.RoleId)
	cacheKeys := []string{
		userRoleAssignmentsAssignmentIdKey, userRoleAssignmentsUserIdRoleIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserRoleAssignmentsModel) Insert(ctx context.Context, tx *gorm.DB, data *UserRoleAssignments) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultUserRoleAssignmentsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []UserRoleAssignments) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultUserRoleAssignmentsModel) FindOne(ctx context.Context, assignmentId uint64) (*UserRoleAssignments, error) {
	userRoleAssignmentsAssignmentIdKey := fmt.Sprintf("%s%v", cacheUserRoleAssignmentsAssignmentIdPrefix, assignmentId)
	var resp UserRoleAssignments
	err := m.QueryCtx(ctx, &resp, userRoleAssignmentsAssignmentIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserRoleAssignments{}).Where("`assignment_id` = ?", assignmentId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleAssignmentsModel) FindOneByUserIdRoleId(ctx context.Context, userId sql.NullInt64, roleId sql.NullInt64) (*UserRoleAssignments, error) {
	userRoleAssignmentsUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheUserRoleAssignmentsUserIdRoleIdPrefix, userId, roleId)
	var resp UserRoleAssignments
	err := m.QueryRowIndexCtx(ctx, &resp, userRoleAssignmentsUserIdRoleIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserRoleAssignments{}).Where("`user_id` = ? and `role_id` = ?", userId, roleId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.AssignmentId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleAssignmentsModel) Update(ctx context.Context, tx *gorm.DB, data *UserRoleAssignments) error {
	old, err := m.FindOne(ctx, data.AssignmentId)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultUserRoleAssignmentsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []UserRoleAssignments) error {
	clearData := make([]UserRoleAssignments, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultUserRoleAssignmentsModel) Delete(ctx context.Context, tx *gorm.DB, assignmentId uint64) error {
	data, err := m.FindOne(ctx, assignmentId)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&UserRoleAssignments{}, assignmentId).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultUserRoleAssignmentsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []UserRoleAssignments) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultUserRoleAssignmentsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserRoleAssignmentsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserRoleAssignmentsAssignmentIdPrefix, primary)
}

func (m *defaultUserRoleAssignmentsModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserRoleAssignments{}).Where("`assignment_id` = ?", primary).Take(v).Error
}
